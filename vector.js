// Generated by CoffeeScript 2.0.3
var Vector;

Vector = class Vector {
  constructor(x = 0, y = 0) {
    this.x = x;
    this.y = y;
  }

  add(v) {
    this.x += v.x;
    this.y += v.y;
    return this;
  }

  static add(v1, v2) {
    return new Vector(v1.x + v2.x, v1.y + v2.y);
  }

  sub(v) {
    this.x -= v.x;
    this.y -= v.y;
    return this;
  }

  static sub(v1, v2) {
    return new Vector(v1.x - v2.x, v1.y - v2.y);
  }

  mult(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  }

  static mult(v, scalar) {
    return new Vector(v.x * scalar, v.y * scalar);
  }

  div(scalar) {
    this.x /= scalar;
    this.y /= scalar;
    return this;
  }

  static div(v, scalar) {
    return new Vector(v.x / scalar, v.y / scalar);
  }

  angle() {
    var rad;
    rad = Math.atan2(this.x, this.y);
    if (rad >= 0) {
      return rad;
    } else {
      return rad += Math.PI * 2;
    }
  }

  static angle(v1, v2) {
    var rad;
    rad = Math.PI - Math.atan2(v2.x - v1.x, v2.y - v1.y);
    if (rad >= 0) {
      return rad;
    } else {
      return rad += Math.PI * 2;
    }
  }

  len() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }

  static len(v) {
    return Math.sqrt(v.x * v.x + v.y * v.y);
  }

  norm() {
    var dy;
    dy = this.len();
    if (dy !== 0) {
      return this.div(dy);
    } else {
      return new Vector(0, 1);
    }
  }

  static norm(v) {
    var dy;
    dy = Vector.len(v);
    if (dy !== 0) {
      return Vector.div(v, dy);
    } else {
      return new Vector(0, 1);
    }
  }

  // скалярное произведение
  dot(v) {
    return this.x * v.x + this.y * v.y;
  }

  dist(v) {
    var dx, dy;
    dx = this.x - v.x;
    dy = this.y - v.y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  static dist(v1, v2) {
    var dx, dy;
    dx = v1.x - v2.x;
    dy = v1.y - v2.y;
    return Math.sqrt(dx * dx + dy * dy);
  }

  static fromRad(rad) {
    return new Vector(Math.sin(rad), Math.cos(rad));
  }

  static fromDeg(deg) {
    return Vector.fromRad(deg * (Math.PI / 180));
  }

  clone() {
    return new Vector(this.x, this.y);
  }

  invX() {
    this.x = -this.x;
    return this;
  }

  invY() {
    this.y = -this.y;
    return this;
  }

  inv() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }

  toString() {
    return `${this.x}, ${this.y}`;
  }

};

export default Vector;
